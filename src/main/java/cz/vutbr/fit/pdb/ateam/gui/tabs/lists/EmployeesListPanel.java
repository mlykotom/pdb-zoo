package cz.vutbr.fit.pdb.ateam.gui.tabs.lists;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import cz.vutbr.fit.pdb.ateam.controller.Controller;
import cz.vutbr.fit.pdb.ateam.controller.EmployeesTabController;
import cz.vutbr.fit.pdb.ateam.gui.BasePanel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;

/**
 * @Author Tomas Hanus
 */
public class EmployeesListPanel extends BasePanel {
	private JTable employeesTable;
	private EmployeesTabController controller;
	private JPanel rootPanel;
	private JButton addNewEmployeeButton;
	private JPanel tablePanel;
	private JPanel datePickerBox;
	private JLabel datePickerLabel;
	private JRadioButton todayRadioButton;
	private JRadioButton historyRadioButton;
	private JDatePickerImpl datePicker;

	public EmployeesListPanel(EmployeesTabController controller) {
		this.controller = controller;
		$$$setupUI$$$();
		add(rootPanel);
		initUI();
	}

	private void initUI() {
		switchToToday();
		initializeDatePicker();

		initializeTodayHistoryRarioButtons();

		addNewEmployeeButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.addNewEmployeeAction();
			}
		});
	}

	private void initializeTodayHistoryRarioButtons() {
		todayRadioButton.setSelected(true);

		ButtonGroup bg = new ButtonGroup();
		bg.add(todayRadioButton);
		bg.add(historyRadioButton);

		todayRadioButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.actualDateSwitchAction(true);
			}
		});

		historyRadioButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.showHistorySwitchAction();
			}
		});

	}


	/**
	 * Method creates and initialize DatePicker to show today's date.
	 */
	private void initializeDatePicker() {
		final UtilDateModel dateModel = new UtilDateModel();
		Properties properties = new Properties();

//		properties.put("text.today", "Today");
//		properties.put("text.month", "Month");
//		properties.put("text.year", "Year");

		final JDatePanelImpl datePanel = new JDatePanelImpl(dateModel, properties);

		datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());

		JFormattedTextField textField = datePicker.getJFormattedTextField();
		textField.setFont(new Font("Segoe UI Semilight", Font.BOLD, 14));
		dateModel.setValue(Calendar.getInstance().getTime());
		this.datePickerBox.removeAll();
		this.datePickerBox.add(datePicker);

		datePicker.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.datePickerChangedAction(dateModel.getValue());
			}
		});
	}

	public void setEmployeesTable(JTable table) {
		employeesTable = table;
		tablePanel.removeAll();

		JScrollPane jScrollPane = new JScrollPane(employeesTable);
		tablePanel.add(jScrollPane);
	}

	@Override
	public Controller getController() {
		return this.controller;
	}

	public void switchToToday() {
//		actualCheckBox.setSelected(true);
//		historyCheckBox.setSelected(false);
//		historyCheckBox.setEnabled(true);
//		actualCheckBox.setEnabled(false);
		datePickerBox.setVisible(false);
		datePickerLabel.setVisible(false);
	}

	public void switchToPast(Date date) {
//		historyCheckBox.setSelected(true);
//		actualCheckBox.setEnabled(true);
//		actualCheckBox.setSelected(false);
//		historyCheckBox.setEnabled(false);
		datePickerBox.setVisible(true);
		datePickerLabel.setVisible(true);

		initializeDatePicker();
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootPanel = new JPanel();
		rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 6, new Insets(0, 0, 0, 0), -1, -1));
		tablePanel = new JPanel();
		tablePanel.setLayout(new BorderLayout(0, 0));
		rootPanel.add(tablePanel, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setFont(new Font(label1.getFont().getName(), Font.BOLD, 20));
		label1.setText("Employees List");
		rootPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setFont(new Font(label2.getFont().getName(), Font.BOLD, 20));
		label2.setText("Date:");
		rootPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JSeparator separator1 = new JSeparator();
		rootPanel.add(separator1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
		rootPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(25, -1), null, null, 0, false));
		addNewEmployeeButton = new JButton();
		addNewEmployeeButton.setText("Add");
		rootPanel.add(addNewEmployeeButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(85, -1), 0, false));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		rootPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		datePickerLabel = new JLabel();
		datePickerLabel.setFont(new Font(datePickerLabel.getFont().getName(), Font.BOLD, 18));
		datePickerLabel.setText("Pick:");
		panel1.add(datePickerLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		datePickerBox = new JPanel();
		datePickerBox.setLayout(new BorderLayout(0, 0));
		panel1.add(datePickerBox, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(150, -1), null, new Dimension(150, -1), 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
		rootPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(3, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		todayRadioButton = new JRadioButton();
		todayRadioButton.setText("Today");
		rootPanel.add(todayRadioButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		historyRadioButton = new JRadioButton();
		historyRadioButton.setText("History");
		rootPanel.add(historyRadioButton, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return rootPanel;
	}

	public class DateLabelFormatter extends JFormattedTextField.AbstractFormatter {

		private String datePattern = "  yyyy-MM-dd";
		private SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);

		@Override
		public Object stringToValue(String text) throws ParseException {
			return dateFormatter.parseObject(text);
		}

		@Override
		public String valueToString(Object value) throws ParseException {
			if (value != null) {
				Calendar cal = (Calendar) value;
				return dateFormatter.format(cal.getTime());
			}

			return "";
		}
	}

}
