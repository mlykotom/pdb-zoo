package cz.vutbr.fit.pdb.ateam.gui.tabs.details;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import cz.vutbr.fit.pdb.ateam.controller.AnimalsTabController;
import cz.vutbr.fit.pdb.ateam.controller.Controller;
import cz.vutbr.fit.pdb.ateam.gui.BasePanel;
import cz.vutbr.fit.pdb.ateam.gui.components.EmployeesHistoryTable;
import cz.vutbr.fit.pdb.ateam.gui.components.MultimediaPanel;
import cz.vutbr.fit.pdb.ateam.gui.components.validations.FloatBiggerOrEqualToZeroInputVerifier;
import cz.vutbr.fit.pdb.ateam.gui.tabs.AnimalsTab;
import cz.vutbr.fit.pdb.ateam.model.animal.AnimalModel;
import cz.vutbr.fit.pdb.ateam.model.spatial.SpatialObjectModel;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

/**
 * Created by Tomas on 10/24/2015.
 */
public class AnimalDetailPanel extends BasePanel {

	private static final String[] EMPLOYEE_DETAIL_HEADER = {"New Animal", "Edit Animal"};

	public static final int NEW_EMPLOYEE = 0;
	public static final int EDIT_EMPLOYEE = 1;

	private JTable animalDetailTable;
	private JPanel rootPanel;
	private final AnimalsTabController controller;
	private JTextField nameEditField;
	private JTextField speciesEditField;
	private JButton saveButton;
	private JButton discardButton;
	private JComboBox<SpatialObjectModel> locationComboBox;
	private JTextField idField;
	private JLabel animalDetailHeader;
	private JCheckBox showHistoryCheckBox;
	private JPanel tablePanel;
	private JButton editButton;
	private JPanel historyPane;
	private JTextField weightEditField;
	private JPanel multimediaPanelParent;
	private JCheckBox showEmployeesHistoryCheckBox;
	private AnimalsTab tab;
	private int animalDetailPanelMode;

	private MultimediaPanel multimediaPanel;
	private ButtonGroup animalDetailButtonGroup;
	private EmployeesHistoryTable employeesHistoryTable;

	public AnimalDetailPanel(AnimalsTab panel) {
		this.tab = panel;
		this.controller = (AnimalsTabController) tab.getController();
		add(rootPanel);
		initUI();
	}

	/**
	 * Set add Animal Shift History table to table panel on AnimalDetail Panel
	 *
	 * @param table
	 */
	public void setAnimalDetailTable(JTable table) {
		animalDetailTable = table;
		animalDetailTable.setMaximumSize(new Dimension(300, 300));
		tablePanel.removeAll();

		JScrollPane jScrollPane = new JScrollPane(animalDetailTable);
		tablePanel.add(jScrollPane, BorderLayout.NORTH);
		editButton.setVisible(true);
	}

	public void setEmployeesHistoryTable(EmployeesHistoryTable employeesHistoryTable) {
		this.employeesHistoryTable = employeesHistoryTable;
		employeesHistoryTable.setMaximumSize(new Dimension(300, 300));
		tablePanel.removeAll();

		JScrollPane jScrollPane = new JScrollPane(employeesHistoryTable);
		tablePanel.add(jScrollPane, BorderLayout.NORTH);

		editButton.setVisible(false);
	}


	private void initUI() {
		this.idField.setEnabled(false);

		this.multimediaPanel = new MultimediaPanel(controller);

		multimediaPanelParent.add(multimediaPanel);

		animalDetailButtonGroup = new ButtonGroup();
		animalDetailButtonGroup.add(showHistoryCheckBox);
		animalDetailButtonGroup.add(showEmployeesHistoryCheckBox);
		animalDetailButtonGroup.clearSelection();

		setListeners();

		setInputValidators();
	}

	/**
	 * This method sets all input validators used on this panel.
	 */
	private void setInputValidators() {
		weightEditField.setInputVerifier(new FloatBiggerOrEqualToZeroInputVerifier());
	}

	/**
	 * Method sets all listeners on this panel.
	 */
	private void setListeners() {
		discardButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.discardUserAction();
			}
		});

		saveButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.saveAnimal(animalDetailPanelMode);
			}
		});

		showHistoryCheckBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				controller.showHistoryAction(showHistoryCheckBox.isSelected());
			}
		});

		editButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				controller.editShiftAction();
			}
		});

		showEmployeesHistoryCheckBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				controller.showEmployeesHistory(showEmployeesHistoryCheckBox.isSelected());
			}
		});
	}

	/**
	 * Prepopulate AnimalDetailPanel with autogenerated ID for new Animal or with existing
	 * animal's personal information.
	 *
	 * @param animal         new/existing animal
	 * @param spatialObjects
	 * @param editMode       NEW_EMPLOYEE or EDIT_EMPLOYEE to set Panel Mode
	 */
	public void populateAnimalDetailPanel(AnimalModel animal, java.util.List<SpatialObjectModel> spatialObjects, int editMode) {
		this.animalDetailPanelMode = editMode;
		this.animalDetailHeader.setText(EMPLOYEE_DETAIL_HEADER[this.animalDetailPanelMode]);
		this.idField.setText(animal.getId().toString());
		this.nameEditField.setText(animal.getName());
		this.speciesEditField.setText(animal.getSpecies());
		this.weightEditField.setText(Float.toString(animal.getWeight()));

		if (editMode == NEW_EMPLOYEE) {
			showHistoryCheckBox.setVisible(false);
			showEmployeesHistoryCheckBox.setVisible(false);
		}
		hideHistoryShiftPane();

		for (SpatialObjectModel spatialObject : spatialObjects) {
			locationComboBox.addItem(spatialObject);
			if (spatialObject.getId() == animal.getLocation()) locationComboBox.setSelectedItem(spatialObject);
		}

	}

	/**
	 * This method hides Shift History Pane.
	 */
	public void hideHistoryShiftPane() {
		historyPane.setVisible(false);
	}

	/**
	 * Method shows History Shift Pane. If 'ShowHistory' checkbox isn't selected it is selected by this method.
	 */
	public void showHistoryShiftPane() {
//		if (!showHistoryCheckBox.isSelected()) showHistoryCheckBox.setSelected(true);

		historyPane.setVisible(true);
	}

	@Override
	public Controller getController() {
		return tab.getController();
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
	}

	public String getNameTextFieldValue() {
		return nameEditField.getText();
	}

	public String getSpeciesTextFieldValue() {
		return speciesEditField.getText();
	}

	public Long getLocationComboBoxValue() {
		return ((SpatialObjectModel) locationComboBox.getSelectedItem()).getId();
	}

	public MultimediaPanel getMultimediaPanel() {
		return multimediaPanel;
	}

	public Float getWeight() {
		return Float.valueOf(this.weightEditField.getText());
	}

	public void clearButtonGroupSelection() {
		this.animalDetailButtonGroup.clearSelection();
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootPanel = new JPanel();
		rootPanel.setLayout(new GridLayoutManager(17, 10, new Insets(0, 0, 0, 0), -1, -1));
		final JLabel label1 = new JLabel();
		label1.setFont(new Font(label1.getFont().getName(), Font.BOLD, 12));
		label1.setText("Name");
		rootPanel.add(label1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_SOUTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, 21), null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setFont(new Font(label2.getFont().getName(), Font.BOLD, 12));
		label2.setText("Species");
		rootPanel.add(label2, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, 21), null, 0, false));
		final Spacer spacer1 = new Spacer();
		rootPanel.add(spacer1, new GridConstraints(14, 9, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		rootPanel.add(panel1, new GridConstraints(14, 2, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		saveButton = new JButton();
		saveButton.setText("Save");
		panel1.add(saveButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		discardButton = new JButton();
		discardButton.setText("Discard");
		panel1.add(discardButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel1.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setFont(new Font(label3.getFont().getName(), Font.BOLD, 12));
		label3.setText("Location");
		rootPanel.add(label3, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, 21), null, 0, false));
		final JLabel label4 = new JLabel();
		label4.setFont(new Font(label4.getFont().getName(), Font.BOLD, 12));
		label4.setText("ID");
		rootPanel.add(label4, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, 21), null, 0, false));
		final Spacer spacer3 = new Spacer();
		rootPanel.add(spacer3, new GridConstraints(0, 2, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		showHistoryCheckBox = new JCheckBox();
		showHistoryCheckBox.setFont(new Font(showHistoryCheckBox.getFont().getName(), Font.BOLD, 18));
		showHistoryCheckBox.setText("Animal History");
		rootPanel.add(showHistoryCheckBox, new GridConstraints(15, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		historyPane = new JPanel();
		historyPane.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
		rootPanel.add(historyPane, new GridConstraints(16, 0, 1, 10, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		editButton = new JButton();
		editButton.setEnabled(true);
		editButton.setText("Edit");
		historyPane.add(editButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		historyPane.add(spacer4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		tablePanel = new JPanel();
		tablePanel.setLayout(new BorderLayout(0, 0));
		tablePanel.setBackground(new Color(-16432887));
		historyPane.add(tablePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label5 = new JLabel();
		label5.setFont(new Font(label5.getFont().getName(), Font.BOLD, 12));
		label5.setText("Weight");
		rootPanel.add(label5, new GridConstraints(11, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer5 = new Spacer();
		rootPanel.add(spacer5, new GridConstraints(6, 9, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		multimediaPanelParent = new JPanel();
		multimediaPanelParent.setLayout(new BorderLayout(0, 0));
		rootPanel.add(multimediaPanelParent, new GridConstraints(2, 0, 13, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		multimediaPanelParent.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-16777216)));
		animalDetailHeader = new JLabel();
		animalDetailHeader.setFont(new Font(animalDetailHeader.getFont().getName(), Font.BOLD, 26));
		animalDetailHeader.setText("someText");
		rootPanel.add(animalDetailHeader, new GridConstraints(1, 0, 1, 8, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		idField = new JTextField();
		idField.setText("");
		rootPanel.add(idField, new GridConstraints(4, 1, 1, 7, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		nameEditField = new JTextField();
		rootPanel.add(nameEditField, new GridConstraints(6, 1, 1, 7, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		speciesEditField = new JTextField();
		rootPanel.add(speciesEditField, new GridConstraints(8, 1, 1, 7, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		locationComboBox = new JComboBox();
		rootPanel.add(locationComboBox, new GridConstraints(10, 1, 1, 7, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		weightEditField = new JTextField();
		rootPanel.add(weightEditField, new GridConstraints(12, 1, 1, 7, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		showEmployeesHistoryCheckBox = new JCheckBox();
		showEmployeesHistoryCheckBox.setFont(new Font(showEmployeesHistoryCheckBox.getFont().getName(), Font.BOLD, 18));
		showEmployeesHistoryCheckBox.setText("Employees History");
		rootPanel.add(showEmployeesHistoryCheckBox, new GridConstraints(15, 2, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return rootPanel;
	}


}
